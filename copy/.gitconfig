[alias]
	# View abbreviated SHA, description, and history graph of the latest 15 commits
	l = log --pretty=oneline -n 15 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	goto = checkout -B
	# Reset the previous commit but keep all changes
	undo = reset HEAD~1 --mixed
	# Amend a commit, adding modifications/deletions but not new files
	amend = commit -a --amend
	# Rename a local branch
	rename = "!f() { git branch -m $1; }; f"
	# Print all Git aliases
	aliases = !"git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort"
	# Show verbose output about tags, remotes, and branches
	tags = tag -l
  remotes = remote -v
  branches = branch -a
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and
	# all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
[diff]
	compactionHeuristic = true
[push]
	default = simple
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[credential]
	helper = osxkeychain
[include]
	path = ~/.gitconfig.local
